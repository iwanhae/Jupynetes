// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/iwanhae/Jupynetes/ent/event"
	"github.com/iwanhae/Jupynetes/ent/predicate"
	"github.com/iwanhae/Jupynetes/ent/server"
	"github.com/iwanhae/Jupynetes/ent/template"
	"github.com/iwanhae/Jupynetes/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.predicates = append(uu.mutation.predicates, ps...)
	return uu
}

// SetUserID sets the user_id field.
func (uu *UserUpdate) SetUserID(s string) *UserUpdate {
	uu.mutation.SetUserID(s)
	return uu
}

// SetUserPw sets the user_pw field.
func (uu *UserUpdate) SetUserPw(s string) *UserUpdate {
	uu.mutation.SetUserPw(s)
	return uu
}

// SetQuotaInstance sets the quota_instance field.
func (uu *UserUpdate) SetQuotaInstance(i int) *UserUpdate {
	uu.mutation.ResetQuotaInstance()
	uu.mutation.SetQuotaInstance(i)
	return uu
}

// SetNillableQuotaInstance sets the quota_instance field if the given value is not nil.
func (uu *UserUpdate) SetNillableQuotaInstance(i *int) *UserUpdate {
	if i != nil {
		uu.SetQuotaInstance(*i)
	}
	return uu
}

// AddQuotaInstance adds i to quota_instance.
func (uu *UserUpdate) AddQuotaInstance(i int) *UserUpdate {
	uu.mutation.AddQuotaInstance(i)
	return uu
}

// SetQuotaCPU sets the quota_cpu field.
func (uu *UserUpdate) SetQuotaCPU(i int) *UserUpdate {
	uu.mutation.ResetQuotaCPU()
	uu.mutation.SetQuotaCPU(i)
	return uu
}

// SetNillableQuotaCPU sets the quota_cpu field if the given value is not nil.
func (uu *UserUpdate) SetNillableQuotaCPU(i *int) *UserUpdate {
	if i != nil {
		uu.SetQuotaCPU(*i)
	}
	return uu
}

// AddQuotaCPU adds i to quota_cpu.
func (uu *UserUpdate) AddQuotaCPU(i int) *UserUpdate {
	uu.mutation.AddQuotaCPU(i)
	return uu
}

// SetQuotaMemory sets the quota_memory field.
func (uu *UserUpdate) SetQuotaMemory(i int) *UserUpdate {
	uu.mutation.ResetQuotaMemory()
	uu.mutation.SetQuotaMemory(i)
	return uu
}

// SetNillableQuotaMemory sets the quota_memory field if the given value is not nil.
func (uu *UserUpdate) SetNillableQuotaMemory(i *int) *UserUpdate {
	if i != nil {
		uu.SetQuotaMemory(*i)
	}
	return uu
}

// AddQuotaMemory adds i to quota_memory.
func (uu *UserUpdate) AddQuotaMemory(i int) *UserUpdate {
	uu.mutation.AddQuotaMemory(i)
	return uu
}

// SetQuotaNvidiaGpu sets the quota_nvidia_gpu field.
func (uu *UserUpdate) SetQuotaNvidiaGpu(i int) *UserUpdate {
	uu.mutation.ResetQuotaNvidiaGpu()
	uu.mutation.SetQuotaNvidiaGpu(i)
	return uu
}

// SetNillableQuotaNvidiaGpu sets the quota_nvidia_gpu field if the given value is not nil.
func (uu *UserUpdate) SetNillableQuotaNvidiaGpu(i *int) *UserUpdate {
	if i != nil {
		uu.SetQuotaNvidiaGpu(*i)
	}
	return uu
}

// AddQuotaNvidiaGpu adds i to quota_nvidia_gpu.
func (uu *UserUpdate) AddQuotaNvidiaGpu(i int) *UserUpdate {
	uu.mutation.AddQuotaNvidiaGpu(i)
	return uu
}

// SetQuotaStorage sets the quota_storage field.
func (uu *UserUpdate) SetQuotaStorage(i int) *UserUpdate {
	uu.mutation.ResetQuotaStorage()
	uu.mutation.SetQuotaStorage(i)
	return uu
}

// SetNillableQuotaStorage sets the quota_storage field if the given value is not nil.
func (uu *UserUpdate) SetNillableQuotaStorage(i *int) *UserUpdate {
	if i != nil {
		uu.SetQuotaStorage(*i)
	}
	return uu
}

// AddQuotaStorage adds i to quota_storage.
func (uu *UserUpdate) AddQuotaStorage(i int) *UserUpdate {
	uu.mutation.AddQuotaStorage(i)
	return uu
}

// SetCreatedAt sets the created_at field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetDeletedAt sets the deleted_at field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of deleted_at.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// AddEventIDs adds the events edge to Event by ids.
func (uu *UserUpdate) AddEventIDs(ids ...int) *UserUpdate {
	uu.mutation.AddEventIDs(ids...)
	return uu
}

// AddEvents adds the events edges to Event.
func (uu *UserUpdate) AddEvents(e ...*Event) *UserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEventIDs(ids...)
}

// AddServerIDs adds the servers edge to Server by ids.
func (uu *UserUpdate) AddServerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddServerIDs(ids...)
	return uu
}

// AddServers adds the servers edges to Server.
func (uu *UserUpdate) AddServers(s ...*Server) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddServerIDs(ids...)
}

// AddTemplateIDs adds the templates edge to Template by ids.
func (uu *UserUpdate) AddTemplateIDs(ids ...int) *UserUpdate {
	uu.mutation.AddTemplateIDs(ids...)
	return uu
}

// AddTemplates adds the templates edges to Template.
func (uu *UserUpdate) AddTemplates(t ...*Template) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTemplateIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearEvents clears all "events" edges to type Event.
func (uu *UserUpdate) ClearEvents() *UserUpdate {
	uu.mutation.ClearEvents()
	return uu
}

// RemoveEventIDs removes the events edge to Event by ids.
func (uu *UserUpdate) RemoveEventIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveEventIDs(ids...)
	return uu
}

// RemoveEvents removes events edges to Event.
func (uu *UserUpdate) RemoveEvents(e ...*Event) *UserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEventIDs(ids...)
}

// ClearServers clears all "servers" edges to type Server.
func (uu *UserUpdate) ClearServers() *UserUpdate {
	uu.mutation.ClearServers()
	return uu
}

// RemoveServerIDs removes the servers edge to Server by ids.
func (uu *UserUpdate) RemoveServerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveServerIDs(ids...)
	return uu
}

// RemoveServers removes servers edges to Server.
func (uu *UserUpdate) RemoveServers(s ...*Server) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveServerIDs(ids...)
}

// ClearTemplates clears all "templates" edges to type Template.
func (uu *UserUpdate) ClearTemplates() *UserUpdate {
	uu.mutation.ClearTemplates()
	return uu
}

// RemoveTemplateIDs removes the templates edge to Template by ids.
func (uu *UserUpdate) RemoveTemplateIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveTemplateIDs(ids...)
	return uu
}

// RemoveTemplates removes templates edges to Template.
func (uu *UserUpdate) RemoveTemplates(t ...*Template) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserID,
		})
	}
	if value, ok := uu.mutation.UserPw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserPw,
		})
	}
	if value, ok := uu.mutation.QuotaInstance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaInstance,
		})
	}
	if value, ok := uu.mutation.AddedQuotaInstance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaInstance,
		})
	}
	if value, ok := uu.mutation.QuotaCPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaCPU,
		})
	}
	if value, ok := uu.mutation.AddedQuotaCPU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaCPU,
		})
	}
	if value, ok := uu.mutation.QuotaMemory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaMemory,
		})
	}
	if value, ok := uu.mutation.AddedQuotaMemory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaMemory,
		})
	}
	if value, ok := uu.mutation.QuotaNvidiaGpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaNvidiaGpu,
		})
	}
	if value, ok := uu.mutation.AddedQuotaNvidiaGpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaNvidiaGpu,
		})
	}
	if value, ok := uu.mutation.QuotaStorage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaStorage,
		})
	}
	if value, ok := uu.mutation.AddedQuotaStorage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaStorage,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if uu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !uu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedServersIDs(); len(nodes) > 0 && !uu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !uu.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetUserID sets the user_id field.
func (uuo *UserUpdateOne) SetUserID(s string) *UserUpdateOne {
	uuo.mutation.SetUserID(s)
	return uuo
}

// SetUserPw sets the user_pw field.
func (uuo *UserUpdateOne) SetUserPw(s string) *UserUpdateOne {
	uuo.mutation.SetUserPw(s)
	return uuo
}

// SetQuotaInstance sets the quota_instance field.
func (uuo *UserUpdateOne) SetQuotaInstance(i int) *UserUpdateOne {
	uuo.mutation.ResetQuotaInstance()
	uuo.mutation.SetQuotaInstance(i)
	return uuo
}

// SetNillableQuotaInstance sets the quota_instance field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQuotaInstance(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetQuotaInstance(*i)
	}
	return uuo
}

// AddQuotaInstance adds i to quota_instance.
func (uuo *UserUpdateOne) AddQuotaInstance(i int) *UserUpdateOne {
	uuo.mutation.AddQuotaInstance(i)
	return uuo
}

// SetQuotaCPU sets the quota_cpu field.
func (uuo *UserUpdateOne) SetQuotaCPU(i int) *UserUpdateOne {
	uuo.mutation.ResetQuotaCPU()
	uuo.mutation.SetQuotaCPU(i)
	return uuo
}

// SetNillableQuotaCPU sets the quota_cpu field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQuotaCPU(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetQuotaCPU(*i)
	}
	return uuo
}

// AddQuotaCPU adds i to quota_cpu.
func (uuo *UserUpdateOne) AddQuotaCPU(i int) *UserUpdateOne {
	uuo.mutation.AddQuotaCPU(i)
	return uuo
}

// SetQuotaMemory sets the quota_memory field.
func (uuo *UserUpdateOne) SetQuotaMemory(i int) *UserUpdateOne {
	uuo.mutation.ResetQuotaMemory()
	uuo.mutation.SetQuotaMemory(i)
	return uuo
}

// SetNillableQuotaMemory sets the quota_memory field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQuotaMemory(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetQuotaMemory(*i)
	}
	return uuo
}

// AddQuotaMemory adds i to quota_memory.
func (uuo *UserUpdateOne) AddQuotaMemory(i int) *UserUpdateOne {
	uuo.mutation.AddQuotaMemory(i)
	return uuo
}

// SetQuotaNvidiaGpu sets the quota_nvidia_gpu field.
func (uuo *UserUpdateOne) SetQuotaNvidiaGpu(i int) *UserUpdateOne {
	uuo.mutation.ResetQuotaNvidiaGpu()
	uuo.mutation.SetQuotaNvidiaGpu(i)
	return uuo
}

// SetNillableQuotaNvidiaGpu sets the quota_nvidia_gpu field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQuotaNvidiaGpu(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetQuotaNvidiaGpu(*i)
	}
	return uuo
}

// AddQuotaNvidiaGpu adds i to quota_nvidia_gpu.
func (uuo *UserUpdateOne) AddQuotaNvidiaGpu(i int) *UserUpdateOne {
	uuo.mutation.AddQuotaNvidiaGpu(i)
	return uuo
}

// SetQuotaStorage sets the quota_storage field.
func (uuo *UserUpdateOne) SetQuotaStorage(i int) *UserUpdateOne {
	uuo.mutation.ResetQuotaStorage()
	uuo.mutation.SetQuotaStorage(i)
	return uuo
}

// SetNillableQuotaStorage sets the quota_storage field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQuotaStorage(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetQuotaStorage(*i)
	}
	return uuo
}

// AddQuotaStorage adds i to quota_storage.
func (uuo *UserUpdateOne) AddQuotaStorage(i int) *UserUpdateOne {
	uuo.mutation.AddQuotaStorage(i)
	return uuo
}

// SetCreatedAt sets the created_at field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetDeletedAt sets the deleted_at field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of deleted_at.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// AddEventIDs adds the events edge to Event by ids.
func (uuo *UserUpdateOne) AddEventIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddEventIDs(ids...)
	return uuo
}

// AddEvents adds the events edges to Event.
func (uuo *UserUpdateOne) AddEvents(e ...*Event) *UserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEventIDs(ids...)
}

// AddServerIDs adds the servers edge to Server by ids.
func (uuo *UserUpdateOne) AddServerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddServerIDs(ids...)
	return uuo
}

// AddServers adds the servers edges to Server.
func (uuo *UserUpdateOne) AddServers(s ...*Server) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddServerIDs(ids...)
}

// AddTemplateIDs adds the templates edge to Template by ids.
func (uuo *UserUpdateOne) AddTemplateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddTemplateIDs(ids...)
	return uuo
}

// AddTemplates adds the templates edges to Template.
func (uuo *UserUpdateOne) AddTemplates(t ...*Template) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTemplateIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearEvents clears all "events" edges to type Event.
func (uuo *UserUpdateOne) ClearEvents() *UserUpdateOne {
	uuo.mutation.ClearEvents()
	return uuo
}

// RemoveEventIDs removes the events edge to Event by ids.
func (uuo *UserUpdateOne) RemoveEventIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveEventIDs(ids...)
	return uuo
}

// RemoveEvents removes events edges to Event.
func (uuo *UserUpdateOne) RemoveEvents(e ...*Event) *UserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEventIDs(ids...)
}

// ClearServers clears all "servers" edges to type Server.
func (uuo *UserUpdateOne) ClearServers() *UserUpdateOne {
	uuo.mutation.ClearServers()
	return uuo
}

// RemoveServerIDs removes the servers edge to Server by ids.
func (uuo *UserUpdateOne) RemoveServerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveServerIDs(ids...)
	return uuo
}

// RemoveServers removes servers edges to Server.
func (uuo *UserUpdateOne) RemoveServers(s ...*Server) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveServerIDs(ids...)
}

// ClearTemplates clears all "templates" edges to type Template.
func (uuo *UserUpdateOne) ClearTemplates() *UserUpdateOne {
	uuo.mutation.ClearTemplates()
	return uuo
}

// RemoveTemplateIDs removes the templates edge to Template by ids.
func (uuo *UserUpdateOne) RemoveTemplateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveTemplateIDs(ids...)
	return uuo
}

// RemoveTemplates removes templates edges to Template.
func (uuo *UserUpdateOne) RemoveTemplates(t ...*Template) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTemplateIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserID,
		})
	}
	if value, ok := uuo.mutation.UserPw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserPw,
		})
	}
	if value, ok := uuo.mutation.QuotaInstance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaInstance,
		})
	}
	if value, ok := uuo.mutation.AddedQuotaInstance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaInstance,
		})
	}
	if value, ok := uuo.mutation.QuotaCPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaCPU,
		})
	}
	if value, ok := uuo.mutation.AddedQuotaCPU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaCPU,
		})
	}
	if value, ok := uuo.mutation.QuotaMemory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaMemory,
		})
	}
	if value, ok := uuo.mutation.AddedQuotaMemory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaMemory,
		})
	}
	if value, ok := uuo.mutation.QuotaNvidiaGpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaNvidiaGpu,
		})
	}
	if value, ok := uuo.mutation.AddedQuotaNvidiaGpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaNvidiaGpu,
		})
	}
	if value, ok := uuo.mutation.QuotaStorage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaStorage,
		})
	}
	if value, ok := uuo.mutation.AddedQuotaStorage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaStorage,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if uuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !uuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedServersIDs(); len(nodes) > 0 && !uuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !uuo.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
