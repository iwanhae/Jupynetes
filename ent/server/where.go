// Code generated by entc, DO NOT EDIT.

package server

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/iwanhae/Jupynetes/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Template applies equality check predicate on the "template" field. It's identical to TemplateEQ.
func Template(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplate), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemory), v))
	})
}

// NvidiaGpu applies equality check predicate on the "nvidia_gpu" field. It's identical to NvidiaGpuEQ.
func NvidiaGpu(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNvidiaGpu), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TemplateEQ applies the EQ predicate on the "template" field.
func TemplateEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplate), v))
	})
}

// TemplateNEQ applies the NEQ predicate on the "template" field.
func TemplateNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplate), v))
	})
}

// TemplateIn applies the In predicate on the "template" field.
func TemplateIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemplate), v...))
	})
}

// TemplateNotIn applies the NotIn predicate on the "template" field.
func TemplateNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemplate), v...))
	})
}

// TemplateGT applies the GT predicate on the "template" field.
func TemplateGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemplate), v))
	})
}

// TemplateGTE applies the GTE predicate on the "template" field.
func TemplateGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemplate), v))
	})
}

// TemplateLT applies the LT predicate on the "template" field.
func TemplateLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemplate), v))
	})
}

// TemplateLTE applies the LTE predicate on the "template" field.
func TemplateLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemplate), v))
	})
}

// TemplateContains applies the Contains predicate on the "template" field.
func TemplateContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTemplate), v))
	})
}

// TemplateHasPrefix applies the HasPrefix predicate on the "template" field.
func TemplateHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTemplate), v))
	})
}

// TemplateHasSuffix applies the HasSuffix predicate on the "template" field.
func TemplateHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTemplate), v))
	})
}

// TemplateEqualFold applies the EqualFold predicate on the "template" field.
func TemplateEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTemplate), v))
	})
}

// TemplateContainsFold applies the ContainsFold predicate on the "template" field.
func TemplateContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTemplate), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCPU), v))
	})
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCPU), v...))
	})
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCPU), v...))
	})
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCPU), v))
	})
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCPU), v))
	})
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCPU), v))
	})
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCPU), v))
	})
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemory), v))
	})
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemory), v))
	})
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemory), v...))
	})
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemory), v...))
	})
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemory), v))
	})
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemory), v))
	})
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemory), v))
	})
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemory), v))
	})
}

// NvidiaGpuEQ applies the EQ predicate on the "nvidia_gpu" field.
func NvidiaGpuEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNvidiaGpu), v))
	})
}

// NvidiaGpuNEQ applies the NEQ predicate on the "nvidia_gpu" field.
func NvidiaGpuNEQ(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNvidiaGpu), v))
	})
}

// NvidiaGpuIn applies the In predicate on the "nvidia_gpu" field.
func NvidiaGpuIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNvidiaGpu), v...))
	})
}

// NvidiaGpuNotIn applies the NotIn predicate on the "nvidia_gpu" field.
func NvidiaGpuNotIn(vs ...int) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNvidiaGpu), v...))
	})
}

// NvidiaGpuGT applies the GT predicate on the "nvidia_gpu" field.
func NvidiaGpuGT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNvidiaGpu), v))
	})
}

// NvidiaGpuGTE applies the GTE predicate on the "nvidia_gpu" field.
func NvidiaGpuGTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNvidiaGpu), v))
	})
}

// NvidiaGpuLT applies the LT predicate on the "nvidia_gpu" field.
func NvidiaGpuLT(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNvidiaGpu), v))
	})
}

// NvidiaGpuLTE applies the LTE predicate on the "nvidia_gpu" field.
func NvidiaGpuLTE(v int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNvidiaGpu), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasOwners applies the HasEdge predicate on the "owners" edge.
func HasOwners() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnersWith applies the HasEdge predicate on the "owners" edge with a given conditions (other predicates).
func HasOwnersWith(preds ...predicate.User) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplateFrom applies the HasEdge predicate on the "template_from" edge.
func HasTemplateFrom() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemplateFromTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TemplateFromTable, TemplateFromPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateFromWith applies the HasEdge predicate on the "template_from" edge with a given conditions (other predicates).
func HasTemplateFromWith(preds ...predicate.Template) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemplateFromInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TemplateFromTable, TemplateFromPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		p(s.Not())
	})
}
