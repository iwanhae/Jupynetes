// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/iwanhae/Jupynetes/ent/event"
	"github.com/iwanhae/Jupynetes/ent/server"
	"github.com/iwanhae/Jupynetes/ent/template"
	"github.com/iwanhae/Jupynetes/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (uc *UserCreate) SetUserID(s string) *UserCreate {
	uc.mutation.SetUserID(s)
	return uc
}

// SetUserPw sets the user_pw field.
func (uc *UserCreate) SetUserPw(s string) *UserCreate {
	uc.mutation.SetUserPw(s)
	return uc
}

// SetQuotaInstance sets the quota_instance field.
func (uc *UserCreate) SetQuotaInstance(i int) *UserCreate {
	uc.mutation.SetQuotaInstance(i)
	return uc
}

// SetNillableQuotaInstance sets the quota_instance field if the given value is not nil.
func (uc *UserCreate) SetNillableQuotaInstance(i *int) *UserCreate {
	if i != nil {
		uc.SetQuotaInstance(*i)
	}
	return uc
}

// SetQuotaCPU sets the quota_cpu field.
func (uc *UserCreate) SetQuotaCPU(i int) *UserCreate {
	uc.mutation.SetQuotaCPU(i)
	return uc
}

// SetNillableQuotaCPU sets the quota_cpu field if the given value is not nil.
func (uc *UserCreate) SetNillableQuotaCPU(i *int) *UserCreate {
	if i != nil {
		uc.SetQuotaCPU(*i)
	}
	return uc
}

// SetQuotaMemory sets the quota_memory field.
func (uc *UserCreate) SetQuotaMemory(i int) *UserCreate {
	uc.mutation.SetQuotaMemory(i)
	return uc
}

// SetNillableQuotaMemory sets the quota_memory field if the given value is not nil.
func (uc *UserCreate) SetNillableQuotaMemory(i *int) *UserCreate {
	if i != nil {
		uc.SetQuotaMemory(*i)
	}
	return uc
}

// SetQuotaNvidiaGpu sets the quota_nvidia_gpu field.
func (uc *UserCreate) SetQuotaNvidiaGpu(i int) *UserCreate {
	uc.mutation.SetQuotaNvidiaGpu(i)
	return uc
}

// SetNillableQuotaNvidiaGpu sets the quota_nvidia_gpu field if the given value is not nil.
func (uc *UserCreate) SetNillableQuotaNvidiaGpu(i *int) *UserCreate {
	if i != nil {
		uc.SetQuotaNvidiaGpu(*i)
	}
	return uc
}

// SetQuotaStorage sets the quota_storage field.
func (uc *UserCreate) SetQuotaStorage(i int) *UserCreate {
	uc.mutation.SetQuotaStorage(i)
	return uc
}

// SetNillableQuotaStorage sets the quota_storage field if the given value is not nil.
func (uc *UserCreate) SetNillableQuotaStorage(i *int) *UserCreate {
	if i != nil {
		uc.SetQuotaStorage(*i)
	}
	return uc
}

// SetCreatedAt sets the created_at field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the deleted_at field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// AddEventIDs adds the events edge to Event by ids.
func (uc *UserCreate) AddEventIDs(ids ...int) *UserCreate {
	uc.mutation.AddEventIDs(ids...)
	return uc
}

// AddEvents adds the events edges to Event.
func (uc *UserCreate) AddEvents(e ...*Event) *UserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEventIDs(ids...)
}

// AddServerIDs adds the servers edge to Server by ids.
func (uc *UserCreate) AddServerIDs(ids ...int) *UserCreate {
	uc.mutation.AddServerIDs(ids...)
	return uc
}

// AddServers adds the servers edges to Server.
func (uc *UserCreate) AddServers(s ...*Server) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddServerIDs(ids...)
}

// AddTemplateIDs adds the templates edge to Template by ids.
func (uc *UserCreate) AddTemplateIDs(ids ...int) *UserCreate {
	uc.mutation.AddTemplateIDs(ids...)
	return uc
}

// AddTemplates adds the templates edges to Template.
func (uc *UserCreate) AddTemplates(t ...*Template) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTemplateIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.QuotaInstance(); !ok {
		v := user.DefaultQuotaInstance
		uc.mutation.SetQuotaInstance(v)
	}
	if _, ok := uc.mutation.QuotaCPU(); !ok {
		v := user.DefaultQuotaCPU
		uc.mutation.SetQuotaCPU(v)
	}
	if _, ok := uc.mutation.QuotaMemory(); !ok {
		v := user.DefaultQuotaMemory
		uc.mutation.SetQuotaMemory(v)
	}
	if _, ok := uc.mutation.QuotaNvidiaGpu(); !ok {
		v := user.DefaultQuotaNvidiaGpu
		uc.mutation.SetQuotaNvidiaGpu(v)
	}
	if _, ok := uc.mutation.QuotaStorage(); !ok {
		v := user.DefaultQuotaStorage
		uc.mutation.SetQuotaStorage(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := uc.mutation.UserPw(); !ok {
		return &ValidationError{Name: "user_pw", err: errors.New("ent: missing required field \"user_pw\"")}
	}
	if _, ok := uc.mutation.QuotaInstance(); !ok {
		return &ValidationError{Name: "quota_instance", err: errors.New("ent: missing required field \"quota_instance\"")}
	}
	if _, ok := uc.mutation.QuotaCPU(); !ok {
		return &ValidationError{Name: "quota_cpu", err: errors.New("ent: missing required field \"quota_cpu\"")}
	}
	if _, ok := uc.mutation.QuotaMemory(); !ok {
		return &ValidationError{Name: "quota_memory", err: errors.New("ent: missing required field \"quota_memory\"")}
	}
	if _, ok := uc.mutation.QuotaNvidiaGpu(); !ok {
		return &ValidationError{Name: "quota_nvidia_gpu", err: errors.New("ent: missing required field \"quota_nvidia_gpu\"")}
	}
	if _, ok := uc.mutation.QuotaStorage(); !ok {
		return &ValidationError{Name: "quota_storage", err: errors.New("ent: missing required field \"quota_storage\"")}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := uc.mutation.UserPw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserPw,
		})
		_node.UserPw = value
	}
	if value, ok := uc.mutation.QuotaInstance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaInstance,
		})
		_node.QuotaInstance = value
	}
	if value, ok := uc.mutation.QuotaCPU(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaCPU,
		})
		_node.QuotaCPU = value
	}
	if value, ok := uc.mutation.QuotaMemory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaMemory,
		})
		_node.QuotaMemory = value
	}
	if value, ok := uc.mutation.QuotaNvidiaGpu(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaNvidiaGpu,
		})
		_node.QuotaNvidiaGpu = value
	}
	if value, ok := uc.mutation.QuotaStorage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldQuotaStorage,
		})
		_node.QuotaStorage = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if nodes := uc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TemplatesTable,
			Columns: user.TemplatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating a bulk of User entities.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
