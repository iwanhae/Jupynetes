// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/iwanhae/Jupynetes/ent/template"
	"github.com/iwanhae/Jupynetes/pkg/common"
)

// Template is the model entity for the Template schema.
type Template struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Template holds the value of the "template" field.
	Template string `json:"template,omitempty"`
	// Variables holds the value of the "variables" field.
	Variables *common.TemplateVariables `json:"variables,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateQuery when eager-loading is set.
	Edges TemplateEdges `json:"edges"`
}

// TemplateEdges holds the relations/edges for other nodes in the graph.
type TemplateEdges struct {
	// User holds the value of the user edge.
	User []*User
	// Server holds the value of the server edge.
	Server []*Server
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e TemplateEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading.
func (e TemplateEdges) ServerOrErr() ([]*Server, error) {
	if e.loadedTypes[1] {
		return e.Server, nil
	}
	return nil, &NotLoadedError{edge: "server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Template) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullString{}, // template
		&[]byte{},         // variables
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // deleted_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Template fields.
func (t *Template) assignValues(values ...interface{}) error {
	if m, n := len(values), len(template.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		t.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		t.Description = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field template", values[2])
	} else if value.Valid {
		t.Template = value.String
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field variables", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &t.Variables); err != nil {
			return fmt.Errorf("unmarshal field variables: %v", err)
		}
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		t.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[5])
	} else if value.Valid {
		t.DeletedAt = value.Time
	}
	return nil
}

// QueryUser queries the user edge of the Template.
func (t *Template) QueryUser() *UserQuery {
	return (&TemplateClient{config: t.config}).QueryUser(t)
}

// QueryServer queries the server edge of the Template.
func (t *Template) QueryServer() *ServerQuery {
	return (&TemplateClient{config: t.config}).QueryServer(t)
}

// Update returns a builder for updating this Template.
// Note that, you need to call Template.Unwrap() before calling this method, if this Template
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Template) Update() *TemplateUpdateOne {
	return (&TemplateClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Template) Unwrap() *Template {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Template is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Template) String() string {
	var builder strings.Builder
	builder.WriteString("Template(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", description=")
	builder.WriteString(t.Description)
	builder.WriteString(", template=")
	builder.WriteString(t.Template)
	builder.WriteString(", variables=")
	builder.WriteString(fmt.Sprintf("%v", t.Variables))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(t.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Templates is a parsable slice of Template.
type Templates []*Template

func (t Templates) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
